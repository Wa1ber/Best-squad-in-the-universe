from PyQt5.QtCore import Qt, QTimer, QTime
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QLabel, QVBoxLayout, QHBoxLayout, QMessageBox, QRadioButton, QButtonGroup, QLineEdit
from final_win import *
from instr import *
from PyQt5.QtGui import QFont     

class TestWin(QWidget):
    def __init__(self):
        super().__init__()
        self.set_appear()
        self.initUI()
        self.connects()
        self.show()
    def set_appear(self):
        self.setWindowTitle(txt_title)
        self.resize(win_width, win_height)
    def initUI(self):
        self.button_FIO = QLabel(txt_name)
        self.button_FIO_w = QLineEdit(txt_hintname)
        self.button_age = QLabel(txt_age)
        self.button_age_w = QLineEdit(txt_hintage)
        self.button_text1 = QLabel(txt_test1)
        self.button_start1 = QPushButton(txt_starttest1)
        self.button_run1 = QLineEdit(txt_hinttest1)
        self.button_text2 = QLabel(txt_test2)
        self.button_start2 = QPushButton(txt_starttest2)
        self.button_text3 = QLabel(txt_test3)
        self.button_start3 = QPushButton(txt_starttest3)
        self.button_run2 = QLineEdit(txt_hinttest2)
        self.button_run3 = QLineEdit(txt_hinttest3)
        self.button_result = QPushButton(txt_sendresults)
        self.button_time = QLabel("00:00:00")
        self.button_time.setFont(QFont('Times', 36,QFont.Bold))
        self.h_line = QHBoxLayout()
        self.l_line = QVBoxLayout()
        self.r_line = QVBoxLayout()
        self.l_line.addWidget(self.button_FIO, alignment = Qt.AlignLeft)
        self.l_line.addWidget(self.button_FIO_w, alignment = Qt.AlignLeft)
        self.l_line.addWidget(self.button_age, alignment = Qt.AlignLeft)
        self.l_line.addWidget(self.button_age_w, alignment = Qt.AlignLeft)
        self.l_line.addWidget(self.button_text1, alignment = Qt.AlignLeft)
        self.l_line.addWidget(self.button_start1, alignment = Qt.AlignLeft)
        self.l_line.addWidget(self.button_run1, alignment = Qt.AlignLeft)
        self.l_line.addWidget(self.button_text2, alignment = Qt.AlignLeft)
        self.l_line.addWidget(self.button_start2, alignment = Qt.AlignLeft)
        self.l_line.addWidget(self.button_text3, alignment = Qt.AlignLeft)
        self.l_line.addWidget(self.button_start3, alignment = Qt.AlignLeft)
        self.l_line.addWidget(self.button_run2, alignment = Qt.AlignLeft)
        self.l_line.addWidget(self.button_run3, alignment = Qt.AlignLeft)
        self.l_line.addWidget(self.button_result, alignment = Qt.AlignCenter)
        self.r_line.addWidget(self.button_time, alignment = Qt.AlignCenter)
        self.h_line.addLayout(self.l_line)
        self.h_line.addLayout(self.r_line)
        self.setLayout(self.h_line)
    def timer_test(self):
        global time 
        time = QTime(0,1,0)
        self.timer = QTimer()
        self.timeout.connect(self.timer1Event)
        self.timer.start(1000)
    def timer1Event(self):
        global time
        time = time.addSecs(-1)
        self.button_time.setText(time.toString("hh:mm:ss"))
        self.button_time.setFont(QFont('Times', 36, QFont.Bold))
        self.button_time.setStyleSheet("color: rgb(0,0,0)")
        if time.toString('hh:mm:ss')=='00:00:00':
            self.timer.stop()
    def timer_sits(self):
        global time
        time = QTime(0,0,30)
        self.timer = QTimer()
        self.timer.start(1500)
        self.timer.timeout.connect(self.timer2Event)
    def timer2Event(self):
        global time
        time = time.addSecs(-1)
        self.button_time.setText(time.toString("hh:mm:ss")[6:8])
        self.button_time.setFont(QFont('Times', 36,QFont.Bold))
        self.button_time.setStyleSheet("color: rgb(0,0,0)")
        if time.toString('hh:mm:ss')=='00:00:00':
            self.timer.stop()
    def timer_final(self):
        global time 
        time = QTime(0,1,0)
        self.timer = QTimer()
        self.timer.timeout.connect(self.timer3Event)
        self.timer.start(1000)
    def timer3Event(self):
        global time
        time = time.addSecs(-1)
        self.button_time.setText(time.toString("hh:mm:ss"))
        self.button_time.setFont(QFont('Times', 36, QFont.Bold))
        if int(time.toString('hh:mm:ss')[6:8])>= 45:
            self.button_time.setStyleSheet('color:rgb(0,255,0)')
        elif int(time.toString('hh:mm:ss')[6:8])<=15:
            self.button_time.setStyleSheet('color:rgb(0,255,0)')
        else:
            self.button_time.setStyleSheet('color:rgb(0,0,0)')
        if time.toString('hh:mm:ss')=='00:00:00':
            self.timer.stop()
    def connects(self):
        self.button_start1.clicked.connect(self.timer_sits)
        self.button_start2.clicked.connect(self.timer_sits)
        self.button_start3.clicked.connect(self.timer_final)
        self.button_result.clicked.connect(self.next_click)
    def next_click(self):
        self.hide()
        self.fw = FinalWin()
